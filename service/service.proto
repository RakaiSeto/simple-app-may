syntax = "proto3";

package order;

option go_package = "/service";
message EmptyStruct {}

message Error {
    optional int64 code = 1;
    string message = 2;
}

// USER
message User {
    int64 id = 1;
    string uname = 2;
    string email = 3;
    optional string password = 4;
    string role = 5;
    optional string created = 6;
    optional string updated = 7;
}

message Users {
    repeated User User = 1;
}

message AddUserStatus {
    string response = 1;
    User User = 2;
    optional Error error = 3;
}

// ORDER
message Order {
    int64 id = 1;
    int64 userid = 2;
    optional string userpassword = 3;
    int64 productid = 4;
    int64 quantity = 5;
    int64 totalprice = 6;
    optional string created = 7;
    optional string updated = 8;
}

message Orders {
    repeated Order Order = 1;
}

message Id {
    int64 id = 1;
}

message ResponseStatus {
    string response = 1;
    optional Error error = 2;
}

message AddOrderStatus {
    string response = 1;
    Order Order = 2;
    optional Error error = 3;
}

// PRODUCT
message Product {
    int64 id = 1;
    string name = 2;
    string description = 3;
    int64 price = 4;
}

message AdminProduct {
    int64 id = 1;
    string name = 2;
    string description = 3;
    int64 price = 4;
    int64 adminid = 5;
    string adminpass = 6;
    optional string created = 7;
    optional string updated = 8;
}

message Products {
    repeated Product Product = 1;
}

message AddProductStatus {
    string response = 1;
    AdminProduct AdminProduct = 2;
    optional Error error = 3;
}

message OauthCallback {
    string state = 1;
    string code = 2;
}

message ResponseBody {
    optional Users Users = 1;
    optional User User = 2;
    optional AddUserStatus AddUserStatus = 3;
    optional Orders Orders = 4;
    optional Order Order = 5;
    optional AddOrderStatus AddOrderStatus = 6;
    optional Products Products = 7;
    optional Product Product = 8;
    optional AddProductStatus AddProductStatus = 9;
    optional ResponseStatus ResponseStatus = 10;
    optional string Error = 11;
    optional RequestBody RequestBody = 12;
    optional string String_ = 13;
}

message ResponseWrapper {
    int64 code = 1;
    string message = 2;
    ResponseBody ResponseBody = 3;
}

message RequestBody {
    optional EmptyStruct EmptyStruct = 1;
    optional Id Id = 2;
    optional User User = 3;
    optional Order Order = 4;
    optional AdminProduct AdminProduct = 5;
    optional string String = 6;
    optional OauthCallback OauthCallback = 7;
}

message RequestWrapper {
    string Method = 1;
    string Url = 2;
    RequestBody RequestBody = 3;
}

// SERVICE GATEAWAY
service Service {
    rpc AllUser(RequestWrapper) returns (ResponseWrapper);
    rpc OneUser(RequestWrapper) returns (ResponseWrapper);
    rpc AddUser(RequestBody) returns (ResponseWrapper);
    rpc UpdateUser(RequestBody) returns (ResponseWrapper);
    rpc DeleteUser(RequestBody) returns (ResponseWrapper);
    rpc AllOrder(RequestWrapper) returns (ResponseWrapper);
    rpc OneOrder(RequestWrapper) returns (ResponseWrapper);
    rpc AddOrder(RequestBody) returns (ResponseWrapper);
    rpc UpdateOrder(RequestBody) returns (ResponseWrapper);
    rpc DeleteOrder(RequestBody) returns (ResponseWrapper);
    rpc AllProduct(RequestWrapper) returns (ResponseWrapper);
    rpc OneProduct(RequestWrapper) returns (ResponseWrapper);
    rpc AddProduct(RequestBody) returns (ResponseWrapper);
    rpc UpdateProduct(RequestBody) returns (ResponseWrapper);
    rpc DeleteProduct(RequestBody) returns (ResponseWrapper);
    rpc Tes(RequestWrapper) returns (ResponseWrapper);
    rpc Login(RequestWrapper) returns (ResponseWrapper);
    rpc LoginGithub(RequestWrapper) returns (ResponseWrapper);
    rpc LoginGithubCallback(RequestWrapper) returns (ResponseWrapper);
    rpc LoginGoogle(RequestWrapper) returns (ResponseWrapper);
    rpc LoginGoogleCallback(RequestWrapper) returns (ResponseWrapper);
    rpc LoginFacebook(RequestWrapper) returns (ResponseWrapper);
    rpc LoginFacebookCallback(RequestWrapper) returns (ResponseWrapper);
    rpc Logout(RequestWrapper) returns (ResponseWrapper);
    rpc ReqError(RequestWrapper) returns (ResponseWrapper);
}