// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.1
// source: service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyStruct) Reset() {
	*x = EmptyStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyStruct) ProtoMessage() {}

func (x *EmptyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyStruct.ProtoReflect.Descriptor instead.
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *int64 `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetCode() int64 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// USER
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uname    string  `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname,omitempty"`
	Email    string  `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Password *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	Role     string  `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	Created  *string `protobuf:"bytes,6,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Updated  *string `protobuf:"bytes,7,opt,name=updated,proto3,oneof" json:"updated,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *User) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *User) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *User) GetUpdated() string {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return ""
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User []*User `protobuf:"bytes,1,rep,name=User,proto3" json:"User,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *Users) GetUser() []*User {
	if x != nil {
		return x.User
	}
	return nil
}

type AddUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	User     *User  `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"`
	Error    *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *AddUserStatus) Reset() {
	*x = AddUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserStatus) ProtoMessage() {}

func (x *AddUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserStatus.ProtoReflect.Descriptor instead.
func (*AddUserStatus) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *AddUserStatus) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *AddUserStatus) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AddUserStatus) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// ORDER
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Userid       int64   `protobuf:"varint,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Userpassword *string `protobuf:"bytes,3,opt,name=userpassword,proto3,oneof" json:"userpassword,omitempty"`
	Productid    int64   `protobuf:"varint,4,opt,name=productid,proto3" json:"productid,omitempty"`
	Quantity     int64   `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Totalprice   int64   `protobuf:"varint,6,opt,name=totalprice,proto3" json:"totalprice,omitempty"`
	Created      *string `protobuf:"bytes,7,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Updated      *string `protobuf:"bytes,8,opt,name=updated,proto3,oneof" json:"updated,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *Order) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *Order) GetUserpassword() string {
	if x != nil && x.Userpassword != nil {
		return *x.Userpassword
	}
	return ""
}

func (x *Order) GetProductid() int64 {
	if x != nil {
		return x.Productid
	}
	return 0
}

func (x *Order) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Order) GetTotalprice() int64 {
	if x != nil {
		return x.Totalprice
	}
	return 0
}

func (x *Order) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *Order) GetUpdated() string {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return ""
}

type Orders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order []*Order `protobuf:"bytes,1,rep,name=Order,proto3" json:"Order,omitempty"`
}

func (x *Orders) Reset() {
	*x = Orders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Orders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orders) ProtoMessage() {}

func (x *Orders) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orders.ProtoReflect.Descriptor instead.
func (*Orders) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *Orders) GetOrder() []*Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *Id) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error    *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *ResponseStatus) Reset() {
	*x = ResponseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatus) ProtoMessage() {}

func (x *ResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatus.ProtoReflect.Descriptor instead.
func (*ResponseStatus) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseStatus) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *ResponseStatus) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type AddOrderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Order    *Order `protobuf:"bytes,2,opt,name=Order,proto3" json:"Order,omitempty"`
	Error    *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *AddOrderStatus) Reset() {
	*x = AddOrderStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrderStatus) ProtoMessage() {}

func (x *AddOrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrderStatus.ProtoReflect.Descriptor instead.
func (*AddOrderStatus) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *AddOrderStatus) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *AddOrderStatus) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *AddOrderStatus) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// PRODUCT
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price       int64  `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *Product) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type AdminProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price       int64   `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Adminid     int64   `protobuf:"varint,5,opt,name=adminid,proto3" json:"adminid,omitempty"`
	Adminpass   string  `protobuf:"bytes,6,opt,name=adminpass,proto3" json:"adminpass,omitempty"`
	Created     *string `protobuf:"bytes,7,opt,name=created,proto3,oneof" json:"created,omitempty"`
	Updated     *string `protobuf:"bytes,8,opt,name=updated,proto3,oneof" json:"updated,omitempty"`
}

func (x *AdminProduct) Reset() {
	*x = AdminProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminProduct) ProtoMessage() {}

func (x *AdminProduct) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminProduct.ProtoReflect.Descriptor instead.
func (*AdminProduct) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *AdminProduct) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdminProduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminProduct) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AdminProduct) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AdminProduct) GetAdminid() int64 {
	if x != nil {
		return x.Adminid
	}
	return 0
}

func (x *AdminProduct) GetAdminpass() string {
	if x != nil {
		return x.Adminpass
	}
	return ""
}

func (x *AdminProduct) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *AdminProduct) GetUpdated() string {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return ""
}

type Products struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product []*Product `protobuf:"bytes,1,rep,name=Product,proto3" json:"Product,omitempty"`
}

func (x *Products) Reset() {
	*x = Products{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Products) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Products) ProtoMessage() {}

func (x *Products) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Products.ProtoReflect.Descriptor instead.
func (*Products) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *Products) GetProduct() []*Product {
	if x != nil {
		return x.Product
	}
	return nil
}

type AddProductStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response     string        `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	AdminProduct *AdminProduct `protobuf:"bytes,2,opt,name=AdminProduct,proto3" json:"AdminProduct,omitempty"`
	Error        *Error        `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *AddProductStatus) Reset() {
	*x = AddProductStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProductStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductStatus) ProtoMessage() {}

func (x *AddProductStatus) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductStatus.ProtoReflect.Descriptor instead.
func (*AddProductStatus) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *AddProductStatus) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *AddProductStatus) GetAdminProduct() *AdminProduct {
	if x != nil {
		return x.AdminProduct
	}
	return nil
}

func (x *AddProductStatus) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type OauthCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *OauthCallback) Reset() {
	*x = OauthCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthCallback) ProtoMessage() {}

func (x *OauthCallback) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthCallback.ProtoReflect.Descriptor instead.
func (*OauthCallback) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *OauthCallback) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *OauthCallback) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users            *Users            `protobuf:"bytes,1,opt,name=Users,proto3,oneof" json:"Users,omitempty"`
	User             *User             `protobuf:"bytes,2,opt,name=User,proto3,oneof" json:"User,omitempty"`
	AddUserStatus    *AddUserStatus    `protobuf:"bytes,3,opt,name=AddUserStatus,proto3,oneof" json:"AddUserStatus,omitempty"`
	Orders           *Orders           `protobuf:"bytes,4,opt,name=Orders,proto3,oneof" json:"Orders,omitempty"`
	Order            *Order            `protobuf:"bytes,5,opt,name=Order,proto3,oneof" json:"Order,omitempty"`
	AddOrderStatus   *AddOrderStatus   `protobuf:"bytes,6,opt,name=AddOrderStatus,proto3,oneof" json:"AddOrderStatus,omitempty"`
	Products         *Products         `protobuf:"bytes,7,opt,name=Products,proto3,oneof" json:"Products,omitempty"`
	Product          *Product          `protobuf:"bytes,8,opt,name=Product,proto3,oneof" json:"Product,omitempty"`
	AddProductStatus *AddProductStatus `protobuf:"bytes,9,opt,name=AddProductStatus,proto3,oneof" json:"AddProductStatus,omitempty"`
	ResponseStatus   *ResponseStatus   `protobuf:"bytes,10,opt,name=ResponseStatus,proto3,oneof" json:"ResponseStatus,omitempty"`
	Error            *string           `protobuf:"bytes,11,opt,name=Error,proto3,oneof" json:"Error,omitempty"`
	RequestBody      *RequestBody      `protobuf:"bytes,12,opt,name=RequestBody,proto3,oneof" json:"RequestBody,omitempty"`
	String_          *string           `protobuf:"bytes,13,opt,name=String_,json=String,proto3,oneof" json:"String_,omitempty"`
}

func (x *ResponseBody) Reset() {
	*x = ResponseBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBody) ProtoMessage() {}

func (x *ResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBody.ProtoReflect.Descriptor instead.
func (*ResponseBody) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *ResponseBody) GetUsers() *Users {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ResponseBody) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ResponseBody) GetAddUserStatus() *AddUserStatus {
	if x != nil {
		return x.AddUserStatus
	}
	return nil
}

func (x *ResponseBody) GetOrders() *Orders {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *ResponseBody) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ResponseBody) GetAddOrderStatus() *AddOrderStatus {
	if x != nil {
		return x.AddOrderStatus
	}
	return nil
}

func (x *ResponseBody) GetProducts() *Products {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *ResponseBody) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ResponseBody) GetAddProductStatus() *AddProductStatus {
	if x != nil {
		return x.AddProductStatus
	}
	return nil
}

func (x *ResponseBody) GetResponseStatus() *ResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *ResponseBody) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *ResponseBody) GetRequestBody() *RequestBody {
	if x != nil {
		return x.RequestBody
	}
	return nil
}

func (x *ResponseBody) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type ResponseWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message      string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ResponseBody *ResponseBody `protobuf:"bytes,3,opt,name=ResponseBody,proto3" json:"ResponseBody,omitempty"`
}

func (x *ResponseWrapper) Reset() {
	*x = ResponseWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWrapper) ProtoMessage() {}

func (x *ResponseWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWrapper.ProtoReflect.Descriptor instead.
func (*ResponseWrapper) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *ResponseWrapper) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseWrapper) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResponseWrapper) GetResponseBody() *ResponseBody {
	if x != nil {
		return x.ResponseBody
	}
	return nil
}

type RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmptyStruct   *EmptyStruct   `protobuf:"bytes,1,opt,name=EmptyStruct,proto3,oneof" json:"EmptyStruct,omitempty"`
	Id            *Id            `protobuf:"bytes,2,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
	User          *User          `protobuf:"bytes,3,opt,name=User,proto3,oneof" json:"User,omitempty"`
	Order         *Order         `protobuf:"bytes,4,opt,name=Order,proto3,oneof" json:"Order,omitempty"`
	AdminProduct  *AdminProduct  `protobuf:"bytes,5,opt,name=AdminProduct,proto3,oneof" json:"AdminProduct,omitempty"`
	String_       *string        `protobuf:"bytes,6,opt,name=String,proto3,oneof" json:"String,omitempty"`
	OauthCallback *OauthCallback `protobuf:"bytes,7,opt,name=OauthCallback,proto3,oneof" json:"OauthCallback,omitempty"`
}

func (x *RequestBody) Reset() {
	*x = RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBody) ProtoMessage() {}

func (x *RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBody.ProtoReflect.Descriptor instead.
func (*RequestBody) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *RequestBody) GetEmptyStruct() *EmptyStruct {
	if x != nil {
		return x.EmptyStruct
	}
	return nil
}

func (x *RequestBody) GetId() *Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RequestBody) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *RequestBody) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *RequestBody) GetAdminProduct() *AdminProduct {
	if x != nil {
		return x.AdminProduct
	}
	return nil
}

func (x *RequestBody) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *RequestBody) GetOauthCallback() *OauthCallback {
	if x != nil {
		return x.OauthCallback
	}
	return nil
}

type RequestWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method      string       `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Url         string       `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`
	RequestBody *RequestBody `protobuf:"bytes,3,opt,name=RequestBody,proto3" json:"RequestBody,omitempty"`
}

func (x *RequestWrapper) Reset() {
	*x = RequestWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWrapper) ProtoMessage() {}

func (x *RequestWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWrapper.ProtoReflect.Descriptor instead.
func (*RequestWrapper) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *RequestWrapper) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RequestWrapper) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RequestWrapper) GetRequestBody() *RequestBody {
	if x != nil {
		return x.RequestBody
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x43, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x7f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x99, 0x02, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2c,
	0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x02,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x5f, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x22, 0xf8, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x70, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x70, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x39,
	0x0a, 0x0d, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xce, 0x06, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x01,
	0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x06, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48, 0x03, 0x52, 0x06, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x04, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x05,
	0x52, 0x0e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x48, 0x06, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x07, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x08, 0x52, 0x10, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x09, 0x52,
	0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x0b, 0x52, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x22, 0x78, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0xab, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x48, 0x01, 0x52, 0x02, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x02, 0x52, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x04, 0x52, 0x0c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x4f, 0x61, 0x75,
	0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x06, 0x52, 0x0d, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x22, 0x70, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x34,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x32, 0xec, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x4f, 0x6e,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x16, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x4f, 0x6e,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x16, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x15,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x0a, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a,
	0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x16, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x03, 0x54, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a,
	0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x15,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x13, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a,
	0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a,
	0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x42, 0x0a, 0x5a, 0x08, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_service_proto_goTypes = []interface{}{
	(*EmptyStruct)(nil),      // 0: order.EmptyStruct
	(*Error)(nil),            // 1: order.Error
	(*User)(nil),             // 2: order.User
	(*Users)(nil),            // 3: order.Users
	(*AddUserStatus)(nil),    // 4: order.AddUserStatus
	(*Order)(nil),            // 5: order.Order
	(*Orders)(nil),           // 6: order.Orders
	(*Id)(nil),               // 7: order.Id
	(*ResponseStatus)(nil),   // 8: order.ResponseStatus
	(*AddOrderStatus)(nil),   // 9: order.AddOrderStatus
	(*Product)(nil),          // 10: order.Product
	(*AdminProduct)(nil),     // 11: order.AdminProduct
	(*Products)(nil),         // 12: order.Products
	(*AddProductStatus)(nil), // 13: order.AddProductStatus
	(*OauthCallback)(nil),    // 14: order.OauthCallback
	(*ResponseBody)(nil),     // 15: order.ResponseBody
	(*ResponseWrapper)(nil),  // 16: order.ResponseWrapper
	(*RequestBody)(nil),      // 17: order.RequestBody
	(*RequestWrapper)(nil),   // 18: order.RequestWrapper
}
var file_service_proto_depIdxs = []int32{
	2,  // 0: order.Users.User:type_name -> order.User
	2,  // 1: order.AddUserStatus.User:type_name -> order.User
	1,  // 2: order.AddUserStatus.error:type_name -> order.Error
	5,  // 3: order.Orders.Order:type_name -> order.Order
	1,  // 4: order.ResponseStatus.error:type_name -> order.Error
	5,  // 5: order.AddOrderStatus.Order:type_name -> order.Order
	1,  // 6: order.AddOrderStatus.error:type_name -> order.Error
	10, // 7: order.Products.Product:type_name -> order.Product
	11, // 8: order.AddProductStatus.AdminProduct:type_name -> order.AdminProduct
	1,  // 9: order.AddProductStatus.error:type_name -> order.Error
	3,  // 10: order.ResponseBody.Users:type_name -> order.Users
	2,  // 11: order.ResponseBody.User:type_name -> order.User
	4,  // 12: order.ResponseBody.AddUserStatus:type_name -> order.AddUserStatus
	6,  // 13: order.ResponseBody.Orders:type_name -> order.Orders
	5,  // 14: order.ResponseBody.Order:type_name -> order.Order
	9,  // 15: order.ResponseBody.AddOrderStatus:type_name -> order.AddOrderStatus
	12, // 16: order.ResponseBody.Products:type_name -> order.Products
	10, // 17: order.ResponseBody.Product:type_name -> order.Product
	13, // 18: order.ResponseBody.AddProductStatus:type_name -> order.AddProductStatus
	8,  // 19: order.ResponseBody.ResponseStatus:type_name -> order.ResponseStatus
	17, // 20: order.ResponseBody.RequestBody:type_name -> order.RequestBody
	15, // 21: order.ResponseWrapper.ResponseBody:type_name -> order.ResponseBody
	0,  // 22: order.RequestBody.EmptyStruct:type_name -> order.EmptyStruct
	7,  // 23: order.RequestBody.Id:type_name -> order.Id
	2,  // 24: order.RequestBody.User:type_name -> order.User
	5,  // 25: order.RequestBody.Order:type_name -> order.Order
	11, // 26: order.RequestBody.AdminProduct:type_name -> order.AdminProduct
	14, // 27: order.RequestBody.OauthCallback:type_name -> order.OauthCallback
	17, // 28: order.RequestWrapper.RequestBody:type_name -> order.RequestBody
	18, // 29: order.Service.AllUser:input_type -> order.RequestWrapper
	18, // 30: order.Service.OneUser:input_type -> order.RequestWrapper
	17, // 31: order.Service.AddUser:input_type -> order.RequestBody
	17, // 32: order.Service.UpdateUser:input_type -> order.RequestBody
	17, // 33: order.Service.DeleteUser:input_type -> order.RequestBody
	18, // 34: order.Service.AllOrder:input_type -> order.RequestWrapper
	18, // 35: order.Service.OneOrder:input_type -> order.RequestWrapper
	17, // 36: order.Service.AddOrder:input_type -> order.RequestBody
	17, // 37: order.Service.UpdateOrder:input_type -> order.RequestBody
	17, // 38: order.Service.DeleteOrder:input_type -> order.RequestBody
	18, // 39: order.Service.AllProduct:input_type -> order.RequestWrapper
	18, // 40: order.Service.OneProduct:input_type -> order.RequestWrapper
	17, // 41: order.Service.AddProduct:input_type -> order.RequestBody
	17, // 42: order.Service.UpdateProduct:input_type -> order.RequestBody
	17, // 43: order.Service.DeleteProduct:input_type -> order.RequestBody
	18, // 44: order.Service.Tes:input_type -> order.RequestWrapper
	18, // 45: order.Service.Login:input_type -> order.RequestWrapper
	18, // 46: order.Service.LoginGithub:input_type -> order.RequestWrapper
	18, // 47: order.Service.LoginGithubCallback:input_type -> order.RequestWrapper
	18, // 48: order.Service.LoginGoogle:input_type -> order.RequestWrapper
	18, // 49: order.Service.LoginGoogleCallback:input_type -> order.RequestWrapper
	18, // 50: order.Service.LoginFacebook:input_type -> order.RequestWrapper
	18, // 51: order.Service.LoginFacebookCallback:input_type -> order.RequestWrapper
	18, // 52: order.Service.Logout:input_type -> order.RequestWrapper
	18, // 53: order.Service.ReqError:input_type -> order.RequestWrapper
	16, // 54: order.Service.AllUser:output_type -> order.ResponseWrapper
	16, // 55: order.Service.OneUser:output_type -> order.ResponseWrapper
	16, // 56: order.Service.AddUser:output_type -> order.ResponseWrapper
	16, // 57: order.Service.UpdateUser:output_type -> order.ResponseWrapper
	16, // 58: order.Service.DeleteUser:output_type -> order.ResponseWrapper
	16, // 59: order.Service.AllOrder:output_type -> order.ResponseWrapper
	16, // 60: order.Service.OneOrder:output_type -> order.ResponseWrapper
	16, // 61: order.Service.AddOrder:output_type -> order.ResponseWrapper
	16, // 62: order.Service.UpdateOrder:output_type -> order.ResponseWrapper
	16, // 63: order.Service.DeleteOrder:output_type -> order.ResponseWrapper
	16, // 64: order.Service.AllProduct:output_type -> order.ResponseWrapper
	16, // 65: order.Service.OneProduct:output_type -> order.ResponseWrapper
	16, // 66: order.Service.AddProduct:output_type -> order.ResponseWrapper
	16, // 67: order.Service.UpdateProduct:output_type -> order.ResponseWrapper
	16, // 68: order.Service.DeleteProduct:output_type -> order.ResponseWrapper
	16, // 69: order.Service.Tes:output_type -> order.ResponseWrapper
	16, // 70: order.Service.Login:output_type -> order.ResponseWrapper
	16, // 71: order.Service.LoginGithub:output_type -> order.ResponseWrapper
	16, // 72: order.Service.LoginGithubCallback:output_type -> order.ResponseWrapper
	16, // 73: order.Service.LoginGoogle:output_type -> order.ResponseWrapper
	16, // 74: order.Service.LoginGoogleCallback:output_type -> order.ResponseWrapper
	16, // 75: order.Service.LoginFacebook:output_type -> order.ResponseWrapper
	16, // 76: order.Service.LoginFacebookCallback:output_type -> order.ResponseWrapper
	16, // 77: order.Service.Logout:output_type -> order.ResponseWrapper
	16, // 78: order.Service.ReqError:output_type -> order.ResponseWrapper
	54, // [54:79] is the sub-list for method output_type
	29, // [29:54] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Orders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrderStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Products); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProductStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OauthCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_service_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	AllUser(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	OneUser(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	AddUser(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error)
	UpdateUser(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error)
	DeleteUser(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error)
	AllOrder(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	OneOrder(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	AddOrder(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error)
	UpdateOrder(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error)
	DeleteOrder(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error)
	AllProduct(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	OneProduct(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	AddProduct(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error)
	UpdateProduct(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error)
	DeleteProduct(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error)
	Tes(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	Login(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	LoginGithub(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	LoginGithubCallback(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	LoginGoogle(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	LoginGoogleCallback(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	LoginFacebook(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	LoginFacebookCallback(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	Logout(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
	ReqError(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AllUser(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/AllUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OneUser(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/OneUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddUser(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUser(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteUser(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllOrder(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/AllOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OneOrder(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/OneOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddOrder(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOrder(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteOrder(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllProduct(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/AllProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OneProduct(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/OneProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddProduct(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateProduct(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteProduct(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Tes(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/Tes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Login(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LoginGithub(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/LoginGithub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LoginGithubCallback(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/LoginGithubCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LoginGoogle(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/LoginGoogle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LoginGoogleCallback(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/LoginGoogleCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LoginFacebook(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/LoginFacebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LoginFacebookCallback(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/LoginFacebookCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Logout(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ReqError(ctx context.Context, in *RequestWrapper, opts ...grpc.CallOption) (*ResponseWrapper, error) {
	out := new(ResponseWrapper)
	err := c.cc.Invoke(ctx, "/order.Service/ReqError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	AllUser(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	OneUser(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	AddUser(context.Context, *RequestBody) (*ResponseWrapper, error)
	UpdateUser(context.Context, *RequestBody) (*ResponseWrapper, error)
	DeleteUser(context.Context, *RequestBody) (*ResponseWrapper, error)
	AllOrder(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	OneOrder(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	AddOrder(context.Context, *RequestBody) (*ResponseWrapper, error)
	UpdateOrder(context.Context, *RequestBody) (*ResponseWrapper, error)
	DeleteOrder(context.Context, *RequestBody) (*ResponseWrapper, error)
	AllProduct(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	OneProduct(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	AddProduct(context.Context, *RequestBody) (*ResponseWrapper, error)
	UpdateProduct(context.Context, *RequestBody) (*ResponseWrapper, error)
	DeleteProduct(context.Context, *RequestBody) (*ResponseWrapper, error)
	Tes(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	Login(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	LoginGithub(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	LoginGithubCallback(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	LoginGoogle(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	LoginGoogleCallback(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	LoginFacebook(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	LoginFacebookCallback(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	Logout(context.Context, *RequestWrapper) (*ResponseWrapper, error)
	ReqError(context.Context, *RequestWrapper) (*ResponseWrapper, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) AllUser(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllUser not implemented")
}
func (*UnimplementedServiceServer) OneUser(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneUser not implemented")
}
func (*UnimplementedServiceServer) AddUser(context.Context, *RequestBody) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedServiceServer) UpdateUser(context.Context, *RequestBody) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedServiceServer) DeleteUser(context.Context, *RequestBody) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedServiceServer) AllOrder(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllOrder not implemented")
}
func (*UnimplementedServiceServer) OneOrder(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneOrder not implemented")
}
func (*UnimplementedServiceServer) AddOrder(context.Context, *RequestBody) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (*UnimplementedServiceServer) UpdateOrder(context.Context, *RequestBody) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (*UnimplementedServiceServer) DeleteOrder(context.Context, *RequestBody) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (*UnimplementedServiceServer) AllProduct(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProduct not implemented")
}
func (*UnimplementedServiceServer) OneProduct(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneProduct not implemented")
}
func (*UnimplementedServiceServer) AddProduct(context.Context, *RequestBody) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (*UnimplementedServiceServer) UpdateProduct(context.Context, *RequestBody) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (*UnimplementedServiceServer) DeleteProduct(context.Context, *RequestBody) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (*UnimplementedServiceServer) Tes(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tes not implemented")
}
func (*UnimplementedServiceServer) Login(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedServiceServer) LoginGithub(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginGithub not implemented")
}
func (*UnimplementedServiceServer) LoginGithubCallback(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginGithubCallback not implemented")
}
func (*UnimplementedServiceServer) LoginGoogle(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginGoogle not implemented")
}
func (*UnimplementedServiceServer) LoginGoogleCallback(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginGoogleCallback not implemented")
}
func (*UnimplementedServiceServer) LoginFacebook(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginFacebook not implemented")
}
func (*UnimplementedServiceServer) LoginFacebookCallback(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginFacebookCallback not implemented")
}
func (*UnimplementedServiceServer) Logout(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedServiceServer) ReqError(context.Context, *RequestWrapper) (*ResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqError not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_AllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/AllUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllUser(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OneUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/OneUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OneUser(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddUser(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUser(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteUser(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/AllOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllOrder(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OneOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OneOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/OneOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OneOrder(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddOrder(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOrder(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteOrder(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/AllProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllProduct(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OneProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OneProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/OneProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OneProduct(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddProduct(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateProduct(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteProduct(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Tes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Tes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/Tes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Tes(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Login(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LoginGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LoginGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/LoginGithub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LoginGithub(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LoginGithubCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LoginGithubCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/LoginGithubCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LoginGithubCallback(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LoginGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LoginGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/LoginGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LoginGoogle(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LoginGoogleCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LoginGoogleCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/LoginGoogleCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LoginGoogleCallback(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LoginFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LoginFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/LoginFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LoginFacebook(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LoginFacebookCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LoginFacebookCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/LoginFacebookCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LoginFacebookCallback(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Logout(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ReqError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ReqError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Service/ReqError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ReqError(ctx, req.(*RequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "order.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllUser",
			Handler:    _Service_AllUser_Handler,
		},
		{
			MethodName: "OneUser",
			Handler:    _Service_OneUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Service_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Service_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Service_DeleteUser_Handler,
		},
		{
			MethodName: "AllOrder",
			Handler:    _Service_AllOrder_Handler,
		},
		{
			MethodName: "OneOrder",
			Handler:    _Service_OneOrder_Handler,
		},
		{
			MethodName: "AddOrder",
			Handler:    _Service_AddOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Service_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _Service_DeleteOrder_Handler,
		},
		{
			MethodName: "AllProduct",
			Handler:    _Service_AllProduct_Handler,
		},
		{
			MethodName: "OneProduct",
			Handler:    _Service_OneProduct_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _Service_AddProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Service_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Service_DeleteProduct_Handler,
		},
		{
			MethodName: "Tes",
			Handler:    _Service_Tes_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Service_Login_Handler,
		},
		{
			MethodName: "LoginGithub",
			Handler:    _Service_LoginGithub_Handler,
		},
		{
			MethodName: "LoginGithubCallback",
			Handler:    _Service_LoginGithubCallback_Handler,
		},
		{
			MethodName: "LoginGoogle",
			Handler:    _Service_LoginGoogle_Handler,
		},
		{
			MethodName: "LoginGoogleCallback",
			Handler:    _Service_LoginGoogleCallback_Handler,
		},
		{
			MethodName: "LoginFacebook",
			Handler:    _Service_LoginFacebook_Handler,
		},
		{
			MethodName: "LoginFacebookCallback",
			Handler:    _Service_LoginFacebookCallback_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Service_Logout_Handler,
		},
		{
			MethodName: "ReqError",
			Handler:    _Service_ReqError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
